//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace EsunnyTap.Net {

public class ITapTradeAPINotify : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ITapTradeAPINotify(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ITapTradeAPINotify obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ITapTradeAPINotify obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ITapTradeAPINotify() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          EsunnyTapApiPINVOKE.delete_ITapTradeAPINotify(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual void OnConnect() {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnConnect(swigCPtr);
  }

  public virtual void OnRspLogin(int errorCode, TapAPITradeLoginRspInfo loginRspInfo) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRspLogin(swigCPtr, errorCode, TapAPITradeLoginRspInfo.getCPtr(loginRspInfo));
  }

  public virtual void OnAPIReady() {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnAPIReady(swigCPtr);
  }

  public virtual void OnDisconnect(int reasonCode) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnDisconnect(swigCPtr, reasonCode);
  }

  public virtual void OnRspChangePassword(uint sessionID, int errorCode) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRspChangePassword(swigCPtr, sessionID, errorCode);
  }

  public virtual void OnRspSetReservedInfo(uint sessionID, int errorCode, string info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRspSetReservedInfo(swigCPtr, sessionID, errorCode, info);
  }

  public virtual void OnRspQryAccount(uint sessionID, uint errorCode, char isLast, TapAPIAccountInfo info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRspQryAccount(swigCPtr, sessionID, errorCode, isLast, TapAPIAccountInfo.getCPtr(info));
  }

  public virtual void OnRspQryFund(uint sessionID, int errorCode, char isLast, TapAPIFundData info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRspQryFund(swigCPtr, sessionID, errorCode, isLast, TapAPIFundData.getCPtr(info));
  }

  public virtual void OnRtnFund(TapAPIFundData info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRtnFund(swigCPtr, TapAPIFundData.getCPtr(info));
  }

  public virtual void OnRspQryExchange(uint sessionID, int errorCode, char isLast, TapAPIExchangeInfo info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRspQryExchange(swigCPtr, sessionID, errorCode, isLast, TapAPIExchangeInfo.getCPtr(info));
  }

  public virtual void OnRspQryCommodity(uint sessionID, int errorCode, char isLast, TapAPICommodityInfo info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRspQryCommodity(swigCPtr, sessionID, errorCode, isLast, TapAPICommodityInfo.getCPtr(info));
  }

  public virtual void OnRspQryContract(uint sessionID, int errorCode, char isLast, TapAPITradeContractInfo info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRspQryContract(swigCPtr, sessionID, errorCode, isLast, TapAPITradeContractInfo.getCPtr(info));
  }

  public virtual void OnRtnContract(TapAPITradeContractInfo info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRtnContract(swigCPtr, TapAPITradeContractInfo.getCPtr(info));
  }

  public virtual void OnRtnOrder(TapAPIOrderInfoNotice info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRtnOrder(swigCPtr, TapAPIOrderInfoNotice.getCPtr(info));
  }

  public virtual void OnRspOrderAction(uint sessionID, uint errorCode, TapAPIOrderActionRsp info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRspOrderAction(swigCPtr, sessionID, errorCode, TapAPIOrderActionRsp.getCPtr(info));
  }

  public virtual void OnRspQryOrder(uint sessionID, int errorCode, char isLast, TapAPIOrderInfo info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRspQryOrder(swigCPtr, sessionID, errorCode, isLast, TapAPIOrderInfo.getCPtr(info));
  }

  public virtual void OnRspQryOrderProcess(uint sessionID, int errorCode, char isLast, TapAPIOrderInfo info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRspQryOrderProcess(swigCPtr, sessionID, errorCode, isLast, TapAPIOrderInfo.getCPtr(info));
  }

  public virtual void OnRspQryFill(uint sessionID, int errorCode, char isLast, TapAPIFillInfo info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRspQryFill(swigCPtr, sessionID, errorCode, isLast, TapAPIFillInfo.getCPtr(info));
  }

  public virtual void OnRtnFill(TapAPIFillInfo info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRtnFill(swigCPtr, TapAPIFillInfo.getCPtr(info));
  }

  public virtual void OnRspQryPosition(uint sessionID, int errorCode, char isLast, TapAPIPositionInfo info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRspQryPosition(swigCPtr, sessionID, errorCode, isLast, TapAPIPositionInfo.getCPtr(info));
  }

  public virtual void OnRtnPosition(TapAPIPositionInfo info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRtnPosition(swigCPtr, TapAPIPositionInfo.getCPtr(info));
  }

  public virtual void OnRspQryClose(uint sessionID, int errorCode, char isLast, TapAPICloseInfo info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRspQryClose(swigCPtr, sessionID, errorCode, isLast, TapAPICloseInfo.getCPtr(info));
  }

  public virtual void OnRtnClose(TapAPICloseInfo info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRtnClose(swigCPtr, TapAPICloseInfo.getCPtr(info));
  }

  public virtual void OnRtnPositionProfit(TapAPIPositionProfitNotice info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRtnPositionProfit(swigCPtr, TapAPIPositionProfitNotice.getCPtr(info));
  }

  public virtual void OnRspQryDeepQuote(uint sessionID, int errorCode, char isLast, TapAPIDeepQuoteQryRsp info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRspQryDeepQuote(swigCPtr, sessionID, errorCode, isLast, TapAPIDeepQuoteQryRsp.getCPtr(info));
  }

  public virtual void OnRspQryExchangeStateInfo(uint sessionID, int errorCode, char isLast, TapAPIExchangeStateInfo info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRspQryExchangeStateInfo(swigCPtr, sessionID, errorCode, isLast, TapAPIExchangeStateInfo.getCPtr(info));
  }

  public virtual void OnRtnExchangeStateInfo(TapAPIExchangeStateInfoNotice info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRtnExchangeStateInfo(swigCPtr, TapAPIExchangeStateInfoNotice.getCPtr(info));
  }

  public virtual void OnRtnReqQuoteNotice(TapAPIReqQuoteNotice info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRtnReqQuoteNotice(swigCPtr, TapAPIReqQuoteNotice.getCPtr(info));
  }

  public virtual void OnRspUpperChannelInfo(uint sessionID, int errorCode, char isLast, TapAPIUpperChannelInfo info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRspUpperChannelInfo(swigCPtr, sessionID, errorCode, isLast, TapAPIUpperChannelInfo.getCPtr(info));
  }

  public virtual void OnRspAccountRentInfo(uint sessionID, int errorCode, char isLast, TapAPIAccountRentInfo info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRspAccountRentInfo(swigCPtr, sessionID, errorCode, isLast, TapAPIAccountRentInfo.getCPtr(info));
  }

  public virtual void OnRspSubmitUserLoginInfo(uint sessionID, int errorCode, char isLast, TapAPISubmitUserLoginRspInfo info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRspSubmitUserLoginInfo(swigCPtr, sessionID, errorCode, isLast, TapAPISubmitUserLoginRspInfo.getCPtr(info));
  }

  public virtual void OnRspQryBill(uint sessionID, int errorCode, char isLast, TapAPIBillQryRsp info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRspQryBill(swigCPtr, sessionID, errorCode, isLast, TapAPIBillQryRsp.getCPtr(info));
  }

  public virtual void OnRspQryAccountStorage(uint sessionID, int errorCode, char isLast, TapAPIAccountStorageInfo info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRspQryAccountStorage(swigCPtr, sessionID, errorCode, isLast, TapAPIAccountStorageInfo.getCPtr(info));
  }

  public virtual void OnRtnAccountStorage(TapAPIAccountStorageInfo info) {
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_OnRtnAccountStorage(swigCPtr, TapAPIAccountStorageInfo.getCPtr(info));
  }

  public ITapTradeAPINotify() : this(EsunnyTapApiPINVOKE.new_ITapTradeAPINotify__SWIG_0(), true) {
    SwigDirectorConnect();
  }

  public ITapTradeAPINotify(ITapTradeAPINotify other) : this(EsunnyTapApiPINVOKE.new_ITapTradeAPINotify__SWIG_1(ITapTradeAPINotify.getCPtr(other)), true) {
    if (EsunnyTapApiPINVOKE.SWIGPendingException.Pending) throw EsunnyTapApiPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("OnConnect", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateITapTradeAPINotify_0(SwigDirectorMethodOnConnect);
    if (SwigDerivedClassHasMethod("OnRspLogin", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateITapTradeAPINotify_1(SwigDirectorMethodOnRspLogin);
    if (SwigDerivedClassHasMethod("OnAPIReady", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateITapTradeAPINotify_2(SwigDirectorMethodOnAPIReady);
    if (SwigDerivedClassHasMethod("OnDisconnect", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateITapTradeAPINotify_3(SwigDirectorMethodOnDisconnect);
    if (SwigDerivedClassHasMethod("OnRspChangePassword", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateITapTradeAPINotify_4(SwigDirectorMethodOnRspChangePassword);
    if (SwigDerivedClassHasMethod("OnRspSetReservedInfo", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateITapTradeAPINotify_5(SwigDirectorMethodOnRspSetReservedInfo);
    if (SwigDerivedClassHasMethod("OnRspQryAccount", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateITapTradeAPINotify_6(SwigDirectorMethodOnRspQryAccount);
    if (SwigDerivedClassHasMethod("OnRspQryFund", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateITapTradeAPINotify_7(SwigDirectorMethodOnRspQryFund);
    if (SwigDerivedClassHasMethod("OnRtnFund", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateITapTradeAPINotify_8(SwigDirectorMethodOnRtnFund);
    if (SwigDerivedClassHasMethod("OnRspQryExchange", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateITapTradeAPINotify_9(SwigDirectorMethodOnRspQryExchange);
    if (SwigDerivedClassHasMethod("OnRspQryCommodity", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateITapTradeAPINotify_10(SwigDirectorMethodOnRspQryCommodity);
    if (SwigDerivedClassHasMethod("OnRspQryContract", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateITapTradeAPINotify_11(SwigDirectorMethodOnRspQryContract);
    if (SwigDerivedClassHasMethod("OnRtnContract", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateITapTradeAPINotify_12(SwigDirectorMethodOnRtnContract);
    if (SwigDerivedClassHasMethod("OnRtnOrder", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateITapTradeAPINotify_13(SwigDirectorMethodOnRtnOrder);
    if (SwigDerivedClassHasMethod("OnRspOrderAction", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateITapTradeAPINotify_14(SwigDirectorMethodOnRspOrderAction);
    if (SwigDerivedClassHasMethod("OnRspQryOrder", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateITapTradeAPINotify_15(SwigDirectorMethodOnRspQryOrder);
    if (SwigDerivedClassHasMethod("OnRspQryOrderProcess", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateITapTradeAPINotify_16(SwigDirectorMethodOnRspQryOrderProcess);
    if (SwigDerivedClassHasMethod("OnRspQryFill", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateITapTradeAPINotify_17(SwigDirectorMethodOnRspQryFill);
    if (SwigDerivedClassHasMethod("OnRtnFill", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateITapTradeAPINotify_18(SwigDirectorMethodOnRtnFill);
    if (SwigDerivedClassHasMethod("OnRspQryPosition", swigMethodTypes19))
      swigDelegate19 = new SwigDelegateITapTradeAPINotify_19(SwigDirectorMethodOnRspQryPosition);
    if (SwigDerivedClassHasMethod("OnRtnPosition", swigMethodTypes20))
      swigDelegate20 = new SwigDelegateITapTradeAPINotify_20(SwigDirectorMethodOnRtnPosition);
    if (SwigDerivedClassHasMethod("OnRspQryClose", swigMethodTypes21))
      swigDelegate21 = new SwigDelegateITapTradeAPINotify_21(SwigDirectorMethodOnRspQryClose);
    if (SwigDerivedClassHasMethod("OnRtnClose", swigMethodTypes22))
      swigDelegate22 = new SwigDelegateITapTradeAPINotify_22(SwigDirectorMethodOnRtnClose);
    if (SwigDerivedClassHasMethod("OnRtnPositionProfit", swigMethodTypes23))
      swigDelegate23 = new SwigDelegateITapTradeAPINotify_23(SwigDirectorMethodOnRtnPositionProfit);
    if (SwigDerivedClassHasMethod("OnRspQryDeepQuote", swigMethodTypes24))
      swigDelegate24 = new SwigDelegateITapTradeAPINotify_24(SwigDirectorMethodOnRspQryDeepQuote);
    if (SwigDerivedClassHasMethod("OnRspQryExchangeStateInfo", swigMethodTypes25))
      swigDelegate25 = new SwigDelegateITapTradeAPINotify_25(SwigDirectorMethodOnRspQryExchangeStateInfo);
    if (SwigDerivedClassHasMethod("OnRtnExchangeStateInfo", swigMethodTypes26))
      swigDelegate26 = new SwigDelegateITapTradeAPINotify_26(SwigDirectorMethodOnRtnExchangeStateInfo);
    if (SwigDerivedClassHasMethod("OnRtnReqQuoteNotice", swigMethodTypes27))
      swigDelegate27 = new SwigDelegateITapTradeAPINotify_27(SwigDirectorMethodOnRtnReqQuoteNotice);
    if (SwigDerivedClassHasMethod("OnRspUpperChannelInfo", swigMethodTypes28))
      swigDelegate28 = new SwigDelegateITapTradeAPINotify_28(SwigDirectorMethodOnRspUpperChannelInfo);
    if (SwigDerivedClassHasMethod("OnRspAccountRentInfo", swigMethodTypes29))
      swigDelegate29 = new SwigDelegateITapTradeAPINotify_29(SwigDirectorMethodOnRspAccountRentInfo);
    if (SwigDerivedClassHasMethod("OnRspSubmitUserLoginInfo", swigMethodTypes30))
      swigDelegate30 = new SwigDelegateITapTradeAPINotify_30(SwigDirectorMethodOnRspSubmitUserLoginInfo);
    if (SwigDerivedClassHasMethod("OnRspQryBill", swigMethodTypes31))
      swigDelegate31 = new SwigDelegateITapTradeAPINotify_31(SwigDirectorMethodOnRspQryBill);
    if (SwigDerivedClassHasMethod("OnRspQryAccountStorage", swigMethodTypes32))
      swigDelegate32 = new SwigDelegateITapTradeAPINotify_32(SwigDirectorMethodOnRspQryAccountStorage);
    if (SwigDerivedClassHasMethod("OnRtnAccountStorage", swigMethodTypes33))
      swigDelegate33 = new SwigDelegateITapTradeAPINotify_33(SwigDirectorMethodOnRtnAccountStorage);
    EsunnyTapApiPINVOKE.ITapTradeAPINotify_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19, swigDelegate20, swigDelegate21, swigDelegate22, swigDelegate23, swigDelegate24, swigDelegate25, swigDelegate26, swigDelegate27, swigDelegate28, swigDelegate29, swigDelegate30, swigDelegate31, swigDelegate32, swigDelegate33);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo[] methodInfos = this.GetType().GetMethods(
        global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance);
    foreach (global::System.Reflection.MethodInfo methodInfo in methodInfos) {
      if (methodInfo.DeclaringType == null)
        continue;

      if (methodInfo.Name != methodName)
        continue;

      var parameters = methodInfo.GetParameters();
      if (parameters.Length != methodTypes.Length)
        continue;

      bool parametersMatch = true;
      for (var i = 0; i < parameters.Length; i++) {
        if (parameters[i].ParameterType != methodTypes[i]) {
          parametersMatch = false;
          break;
        }
      }

      if (!parametersMatch)
        continue;

      if (methodInfo.IsVirtual && (methodInfo.DeclaringType.IsSubclassOf(typeof(ITapTradeAPINotify))) &&
        methodInfo.DeclaringType != methodInfo.GetBaseDefinition().DeclaringType) {
        return true;
      }
    }

    return false;
  }

  private void SwigDirectorMethodOnConnect() {
    OnConnect();
  }

  private void SwigDirectorMethodOnRspLogin(int errorCode, global::System.IntPtr loginRspInfo) {
    OnRspLogin(errorCode, (loginRspInfo == global::System.IntPtr.Zero) ? null : new TapAPITradeLoginRspInfo(loginRspInfo, false));
  }

  private void SwigDirectorMethodOnAPIReady() {
    OnAPIReady();
  }

  private void SwigDirectorMethodOnDisconnect(int reasonCode) {
    OnDisconnect(reasonCode);
  }

  private void SwigDirectorMethodOnRspChangePassword(uint sessionID, int errorCode) {
    OnRspChangePassword(sessionID, errorCode);
  }

  private void SwigDirectorMethodOnRspSetReservedInfo(uint sessionID, int errorCode, string info) {
    OnRspSetReservedInfo(sessionID, errorCode, info);
  }

  private void SwigDirectorMethodOnRspQryAccount(uint sessionID, uint errorCode, char isLast, global::System.IntPtr info) {
    OnRspQryAccount(sessionID, errorCode, isLast, (info == global::System.IntPtr.Zero) ? null : new TapAPIAccountInfo(info, false));
  }

  private void SwigDirectorMethodOnRspQryFund(uint sessionID, int errorCode, char isLast, global::System.IntPtr info) {
    OnRspQryFund(sessionID, errorCode, isLast, (info == global::System.IntPtr.Zero) ? null : new TapAPIFundData(info, false));
  }

  private void SwigDirectorMethodOnRtnFund(global::System.IntPtr info) {
    OnRtnFund((info == global::System.IntPtr.Zero) ? null : new TapAPIFundData(info, false));
  }

  private void SwigDirectorMethodOnRspQryExchange(uint sessionID, int errorCode, char isLast, global::System.IntPtr info) {
    OnRspQryExchange(sessionID, errorCode, isLast, (info == global::System.IntPtr.Zero) ? null : new TapAPIExchangeInfo(info, false));
  }

  private void SwigDirectorMethodOnRspQryCommodity(uint sessionID, int errorCode, char isLast, global::System.IntPtr info) {
    OnRspQryCommodity(sessionID, errorCode, isLast, (info == global::System.IntPtr.Zero) ? null : new TapAPICommodityInfo(info, false));
  }

  private void SwigDirectorMethodOnRspQryContract(uint sessionID, int errorCode, char isLast, global::System.IntPtr info) {
    OnRspQryContract(sessionID, errorCode, isLast, (info == global::System.IntPtr.Zero) ? null : new TapAPITradeContractInfo(info, false));
  }

  private void SwigDirectorMethodOnRtnContract(global::System.IntPtr info) {
    OnRtnContract((info == global::System.IntPtr.Zero) ? null : new TapAPITradeContractInfo(info, false));
  }

  private void SwigDirectorMethodOnRtnOrder(global::System.IntPtr info) {
    OnRtnOrder((info == global::System.IntPtr.Zero) ? null : new TapAPIOrderInfoNotice(info, false));
  }

  private void SwigDirectorMethodOnRspOrderAction(uint sessionID, uint errorCode, global::System.IntPtr info) {
    OnRspOrderAction(sessionID, errorCode, (info == global::System.IntPtr.Zero) ? null : new TapAPIOrderActionRsp(info, false));
  }

  private void SwigDirectorMethodOnRspQryOrder(uint sessionID, int errorCode, char isLast, global::System.IntPtr info) {
    OnRspQryOrder(sessionID, errorCode, isLast, (info == global::System.IntPtr.Zero) ? null : new TapAPIOrderInfo(info, false));
  }

  private void SwigDirectorMethodOnRspQryOrderProcess(uint sessionID, int errorCode, char isLast, global::System.IntPtr info) {
    OnRspQryOrderProcess(sessionID, errorCode, isLast, (info == global::System.IntPtr.Zero) ? null : new TapAPIOrderInfo(info, false));
  }

  private void SwigDirectorMethodOnRspQryFill(uint sessionID, int errorCode, char isLast, global::System.IntPtr info) {
    OnRspQryFill(sessionID, errorCode, isLast, (info == global::System.IntPtr.Zero) ? null : new TapAPIFillInfo(info, false));
  }

  private void SwigDirectorMethodOnRtnFill(global::System.IntPtr info) {
    OnRtnFill((info == global::System.IntPtr.Zero) ? null : new TapAPIFillInfo(info, false));
  }

  private void SwigDirectorMethodOnRspQryPosition(uint sessionID, int errorCode, char isLast, global::System.IntPtr info) {
    OnRspQryPosition(sessionID, errorCode, isLast, (info == global::System.IntPtr.Zero) ? null : new TapAPIPositionInfo(info, false));
  }

  private void SwigDirectorMethodOnRtnPosition(global::System.IntPtr info) {
    OnRtnPosition((info == global::System.IntPtr.Zero) ? null : new TapAPIPositionInfo(info, false));
  }

  private void SwigDirectorMethodOnRspQryClose(uint sessionID, int errorCode, char isLast, global::System.IntPtr info) {
    OnRspQryClose(sessionID, errorCode, isLast, (info == global::System.IntPtr.Zero) ? null : new TapAPICloseInfo(info, false));
  }

  private void SwigDirectorMethodOnRtnClose(global::System.IntPtr info) {
    OnRtnClose((info == global::System.IntPtr.Zero) ? null : new TapAPICloseInfo(info, false));
  }

  private void SwigDirectorMethodOnRtnPositionProfit(global::System.IntPtr info) {
    OnRtnPositionProfit((info == global::System.IntPtr.Zero) ? null : new TapAPIPositionProfitNotice(info, false));
  }

  private void SwigDirectorMethodOnRspQryDeepQuote(uint sessionID, int errorCode, char isLast, global::System.IntPtr info) {
    OnRspQryDeepQuote(sessionID, errorCode, isLast, (info == global::System.IntPtr.Zero) ? null : new TapAPIDeepQuoteQryRsp(info, false));
  }

  private void SwigDirectorMethodOnRspQryExchangeStateInfo(uint sessionID, int errorCode, char isLast, global::System.IntPtr info) {
    OnRspQryExchangeStateInfo(sessionID, errorCode, isLast, (info == global::System.IntPtr.Zero) ? null : new TapAPIExchangeStateInfo(info, false));
  }

  private void SwigDirectorMethodOnRtnExchangeStateInfo(global::System.IntPtr info) {
    OnRtnExchangeStateInfo((info == global::System.IntPtr.Zero) ? null : new TapAPIExchangeStateInfoNotice(info, false));
  }

  private void SwigDirectorMethodOnRtnReqQuoteNotice(global::System.IntPtr info) {
    OnRtnReqQuoteNotice((info == global::System.IntPtr.Zero) ? null : new TapAPIReqQuoteNotice(info, false));
  }

  private void SwigDirectorMethodOnRspUpperChannelInfo(uint sessionID, int errorCode, char isLast, global::System.IntPtr info) {
    OnRspUpperChannelInfo(sessionID, errorCode, isLast, (info == global::System.IntPtr.Zero) ? null : new TapAPIUpperChannelInfo(info, false));
  }

  private void SwigDirectorMethodOnRspAccountRentInfo(uint sessionID, int errorCode, char isLast, global::System.IntPtr info) {
    OnRspAccountRentInfo(sessionID, errorCode, isLast, (info == global::System.IntPtr.Zero) ? null : new TapAPIAccountRentInfo(info, false));
  }

  private void SwigDirectorMethodOnRspSubmitUserLoginInfo(uint sessionID, int errorCode, char isLast, global::System.IntPtr info) {
    OnRspSubmitUserLoginInfo(sessionID, errorCode, isLast, (info == global::System.IntPtr.Zero) ? null : new TapAPISubmitUserLoginRspInfo(info, false));
  }

  private void SwigDirectorMethodOnRspQryBill(uint sessionID, int errorCode, char isLast, global::System.IntPtr info) {
    OnRspQryBill(sessionID, errorCode, isLast, (info == global::System.IntPtr.Zero) ? null : new TapAPIBillQryRsp(info, false));
  }

  private void SwigDirectorMethodOnRspQryAccountStorage(uint sessionID, int errorCode, char isLast, global::System.IntPtr info) {
    OnRspQryAccountStorage(sessionID, errorCode, isLast, (info == global::System.IntPtr.Zero) ? null : new TapAPIAccountStorageInfo(info, false));
  }

  private void SwigDirectorMethodOnRtnAccountStorage(global::System.IntPtr info) {
    OnRtnAccountStorage((info == global::System.IntPtr.Zero) ? null : new TapAPIAccountStorageInfo(info, false));
  }

  public delegate void SwigDelegateITapTradeAPINotify_0();
  public delegate void SwigDelegateITapTradeAPINotify_1(int errorCode, global::System.IntPtr loginRspInfo);
  public delegate void SwigDelegateITapTradeAPINotify_2();
  public delegate void SwigDelegateITapTradeAPINotify_3(int reasonCode);
  public delegate void SwigDelegateITapTradeAPINotify_4(uint sessionID, int errorCode);
  public delegate void SwigDelegateITapTradeAPINotify_5(uint sessionID, int errorCode, string info);
  public delegate void SwigDelegateITapTradeAPINotify_6(uint sessionID, uint errorCode, char isLast, global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_7(uint sessionID, int errorCode, char isLast, global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_8(global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_9(uint sessionID, int errorCode, char isLast, global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_10(uint sessionID, int errorCode, char isLast, global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_11(uint sessionID, int errorCode, char isLast, global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_12(global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_13(global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_14(uint sessionID, uint errorCode, global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_15(uint sessionID, int errorCode, char isLast, global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_16(uint sessionID, int errorCode, char isLast, global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_17(uint sessionID, int errorCode, char isLast, global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_18(global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_19(uint sessionID, int errorCode, char isLast, global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_20(global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_21(uint sessionID, int errorCode, char isLast, global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_22(global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_23(global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_24(uint sessionID, int errorCode, char isLast, global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_25(uint sessionID, int errorCode, char isLast, global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_26(global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_27(global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_28(uint sessionID, int errorCode, char isLast, global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_29(uint sessionID, int errorCode, char isLast, global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_30(uint sessionID, int errorCode, char isLast, global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_31(uint sessionID, int errorCode, char isLast, global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_32(uint sessionID, int errorCode, char isLast, global::System.IntPtr info);
  public delegate void SwigDelegateITapTradeAPINotify_33(global::System.IntPtr info);

  private SwigDelegateITapTradeAPINotify_0 swigDelegate0;
  private SwigDelegateITapTradeAPINotify_1 swigDelegate1;
  private SwigDelegateITapTradeAPINotify_2 swigDelegate2;
  private SwigDelegateITapTradeAPINotify_3 swigDelegate3;
  private SwigDelegateITapTradeAPINotify_4 swigDelegate4;
  private SwigDelegateITapTradeAPINotify_5 swigDelegate5;
  private SwigDelegateITapTradeAPINotify_6 swigDelegate6;
  private SwigDelegateITapTradeAPINotify_7 swigDelegate7;
  private SwigDelegateITapTradeAPINotify_8 swigDelegate8;
  private SwigDelegateITapTradeAPINotify_9 swigDelegate9;
  private SwigDelegateITapTradeAPINotify_10 swigDelegate10;
  private SwigDelegateITapTradeAPINotify_11 swigDelegate11;
  private SwigDelegateITapTradeAPINotify_12 swigDelegate12;
  private SwigDelegateITapTradeAPINotify_13 swigDelegate13;
  private SwigDelegateITapTradeAPINotify_14 swigDelegate14;
  private SwigDelegateITapTradeAPINotify_15 swigDelegate15;
  private SwigDelegateITapTradeAPINotify_16 swigDelegate16;
  private SwigDelegateITapTradeAPINotify_17 swigDelegate17;
  private SwigDelegateITapTradeAPINotify_18 swigDelegate18;
  private SwigDelegateITapTradeAPINotify_19 swigDelegate19;
  private SwigDelegateITapTradeAPINotify_20 swigDelegate20;
  private SwigDelegateITapTradeAPINotify_21 swigDelegate21;
  private SwigDelegateITapTradeAPINotify_22 swigDelegate22;
  private SwigDelegateITapTradeAPINotify_23 swigDelegate23;
  private SwigDelegateITapTradeAPINotify_24 swigDelegate24;
  private SwigDelegateITapTradeAPINotify_25 swigDelegate25;
  private SwigDelegateITapTradeAPINotify_26 swigDelegate26;
  private SwigDelegateITapTradeAPINotify_27 swigDelegate27;
  private SwigDelegateITapTradeAPINotify_28 swigDelegate28;
  private SwigDelegateITapTradeAPINotify_29 swigDelegate29;
  private SwigDelegateITapTradeAPINotify_30 swigDelegate30;
  private SwigDelegateITapTradeAPINotify_31 swigDelegate31;
  private SwigDelegateITapTradeAPINotify_32 swigDelegate32;
  private SwigDelegateITapTradeAPINotify_33 swigDelegate33;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(int), typeof(TapAPITradeLoginRspInfo) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(uint), typeof(int) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(uint), typeof(int), typeof(string) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(uint), typeof(uint), typeof(char), typeof(TapAPIAccountInfo) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(uint), typeof(int), typeof(char), typeof(TapAPIFundData) };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] { typeof(TapAPIFundData) };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] { typeof(uint), typeof(int), typeof(char), typeof(TapAPIExchangeInfo) };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] { typeof(uint), typeof(int), typeof(char), typeof(TapAPICommodityInfo) };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] { typeof(uint), typeof(int), typeof(char), typeof(TapAPITradeContractInfo) };
  private static global::System.Type[] swigMethodTypes12 = new global::System.Type[] { typeof(TapAPITradeContractInfo) };
  private static global::System.Type[] swigMethodTypes13 = new global::System.Type[] { typeof(TapAPIOrderInfoNotice) };
  private static global::System.Type[] swigMethodTypes14 = new global::System.Type[] { typeof(uint), typeof(uint), typeof(TapAPIOrderActionRsp) };
  private static global::System.Type[] swigMethodTypes15 = new global::System.Type[] { typeof(uint), typeof(int), typeof(char), typeof(TapAPIOrderInfo) };
  private static global::System.Type[] swigMethodTypes16 = new global::System.Type[] { typeof(uint), typeof(int), typeof(char), typeof(TapAPIOrderInfo) };
  private static global::System.Type[] swigMethodTypes17 = new global::System.Type[] { typeof(uint), typeof(int), typeof(char), typeof(TapAPIFillInfo) };
  private static global::System.Type[] swigMethodTypes18 = new global::System.Type[] { typeof(TapAPIFillInfo) };
  private static global::System.Type[] swigMethodTypes19 = new global::System.Type[] { typeof(uint), typeof(int), typeof(char), typeof(TapAPIPositionInfo) };
  private static global::System.Type[] swigMethodTypes20 = new global::System.Type[] { typeof(TapAPIPositionInfo) };
  private static global::System.Type[] swigMethodTypes21 = new global::System.Type[] { typeof(uint), typeof(int), typeof(char), typeof(TapAPICloseInfo) };
  private static global::System.Type[] swigMethodTypes22 = new global::System.Type[] { typeof(TapAPICloseInfo) };
  private static global::System.Type[] swigMethodTypes23 = new global::System.Type[] { typeof(TapAPIPositionProfitNotice) };
  private static global::System.Type[] swigMethodTypes24 = new global::System.Type[] { typeof(uint), typeof(int), typeof(char), typeof(TapAPIDeepQuoteQryRsp) };
  private static global::System.Type[] swigMethodTypes25 = new global::System.Type[] { typeof(uint), typeof(int), typeof(char), typeof(TapAPIExchangeStateInfo) };
  private static global::System.Type[] swigMethodTypes26 = new global::System.Type[] { typeof(TapAPIExchangeStateInfoNotice) };
  private static global::System.Type[] swigMethodTypes27 = new global::System.Type[] { typeof(TapAPIReqQuoteNotice) };
  private static global::System.Type[] swigMethodTypes28 = new global::System.Type[] { typeof(uint), typeof(int), typeof(char), typeof(TapAPIUpperChannelInfo) };
  private static global::System.Type[] swigMethodTypes29 = new global::System.Type[] { typeof(uint), typeof(int), typeof(char), typeof(TapAPIAccountRentInfo) };
  private static global::System.Type[] swigMethodTypes30 = new global::System.Type[] { typeof(uint), typeof(int), typeof(char), typeof(TapAPISubmitUserLoginRspInfo) };
  private static global::System.Type[] swigMethodTypes31 = new global::System.Type[] { typeof(uint), typeof(int), typeof(char), typeof(TapAPIBillQryRsp) };
  private static global::System.Type[] swigMethodTypes32 = new global::System.Type[] { typeof(uint), typeof(int), typeof(char), typeof(TapAPIAccountStorageInfo) };
  private static global::System.Type[] swigMethodTypes33 = new global::System.Type[] { typeof(TapAPIAccountStorageInfo) };
}

}
