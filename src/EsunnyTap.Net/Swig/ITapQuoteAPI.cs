//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace EsunnyTap.Net {

public class ITapQuoteAPI : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ITapQuoteAPI(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ITapQuoteAPI obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ITapQuoteAPI obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ITapQuoteAPI() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          EsunnyTapApiPINVOKE.delete_ITapQuoteAPI(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual int SetAPINotify(ITapQuoteAPINotify apiNotify) {
    int ret = EsunnyTapApiPINVOKE.ITapQuoteAPI_SetAPINotify(swigCPtr, ITapQuoteAPINotify.getCPtr(apiNotify));
    return ret;
  }

  public virtual int SetHostAddress(string IP, ushort port) {
    int ret = EsunnyTapApiPINVOKE.ITapQuoteAPI_SetHostAddress(swigCPtr, IP, port);
    return ret;
  }

  public virtual int Login(TapAPIQuoteLoginAuth loginAuth) {
    int ret = EsunnyTapApiPINVOKE.ITapQuoteAPI_Login(swigCPtr, TapAPIQuoteLoginAuth.getCPtr(loginAuth));
    return ret;
  }

  public virtual int Disconnect() {
    int ret = EsunnyTapApiPINVOKE.ITapQuoteAPI_Disconnect(swigCPtr);
    return ret;
  }

  public virtual int QryCommodity(ref uint sessionID) {
    int ret = EsunnyTapApiPINVOKE.ITapQuoteAPI_QryCommodity(swigCPtr, ref sessionID);
    return ret;
  }

  public virtual int QryContract(ref uint sessionID, TapAPICommodity qryReq) {
    int ret = EsunnyTapApiPINVOKE.ITapQuoteAPI_QryContract(swigCPtr, ref sessionID, TapAPICommodity.getCPtr(qryReq));
    return ret;
  }

  public virtual int SubscribeQuote(ref uint sessionID, TapAPIContract contract) {
    int ret = EsunnyTapApiPINVOKE.ITapQuoteAPI_SubscribeQuote(swigCPtr, ref sessionID, TapAPIContract.getCPtr(contract));
    return ret;
  }

  public virtual int UnSubscribeQuote(ref uint sessionID, TapAPIContract contract) {
    int ret = EsunnyTapApiPINVOKE.ITapQuoteAPI_UnSubscribeQuote(swigCPtr, ref sessionID, TapAPIContract.getCPtr(contract));
    return ret;
  }

}

}
